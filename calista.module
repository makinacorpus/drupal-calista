<?php
/**
 * Calista module.
 */

use MakinaCorpus\Calista\Action\Action;
use MakinaCorpus\Calista\DependencyInjection\ConfigPageDefinition;
use MakinaCorpus\Drupal\Calista\Controller\ActionProcessorController;
use MakinaCorpus\Drupal\Calista\Controller\AjaxPageController;
use MakinaCorpus\Drupal\Calista\Controller\PageController;

/**
 * View mode for content display.
 */
const CALISTA_VIEW_MODE_CONTENTADMIN = 'contentadmin';

/**
 * View mode for cart display.
 */
const CALISTA_VIEW_MODE_FAVORITE = 'favorite';

/**
 * Image style for search.
 */
const CALISTA_STYLE_CONTENTADMIN = 'contentadmin';

/**
 * Image style for favorite.
 */
const CALISTA_STYLE_FAVORITE = 'favorite';

/**
 * Use contextual pane permission.
 */
const CALISTA_PERM_USE_CONTEXT_PANE = 'use contextual pane';

/**
 * Implements hook_permission().
 */
function calista_permission() {
  return [
    CALISTA_PERM_USE_CONTEXT_PANE => [
      'title' => t("Use contextual pane"),
    ],
  ];
}

/**
 * Implements hook_admin_custom_theme().
 */
function calista_custom_theme() {
  if (module_exists('ucms_site') && ucms_site_is_master()) {
    return variable_get('admin_theme', variable_get('theme_default', 'bartik'));
  }
}

/**
 * Implements hook_menu().
 */
function calista_menu() {

  $items = [];

  $items['home'] = [
    'page callback'     => 'calista_home',
    'access callback'   => true,
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/dashboard'] = [
    'title'             => "Dashboard",
    'page callback'     => 'calista_page',
    'access arguments'  => ['access administration pages'],
    'type'              => MENU_NORMAL_ITEM,
  ];
  $items['admin/calisata/action-process'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [ActionProcessorController::class .  '::process'],
    'type'              => MENU_CALLBACK,
  ];
  $items['admin/calista/refresh'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [AjaxPageController::class .  '::refresh'],
    'type'              => MENU_CALLBACK,
  ];

  // Testing
  $items['admin/calista/test/user'] = [
    'page callback'     => 'sf_dic_page',
    'page arguments'    => [PageController::class .  '::page', 'calista.page.drupal_account'],
    'access arguments'  => ['non existing permission'],
    'type'              => MENU_CALLBACK,
  ];

  // Find all pages, register them
  // @todo Find a way using the compiler passes.
  /** @var \MakinaCorpus\Calista\DependencyInjection\ViewFactory $viewFactory */
  $viewFactory = \Drupal::service('calista.view_factory');
  /** @var \MakinaCorpus\Calista\DependencyInjection\ConfigPageDefinition $page */
  foreach ($viewFactory->getPageDefinitionList(ConfigPageDefinition::class) as $name => $page) {
    $extra = $page->getExtraOptions();
    if (isset($extra['route'])) {
      $item = $extra['route'] + ['page callback' => 'sf_dic_page', 'page arguments' => [PageController::class .  '::page', $name]];
      _sf_dic_menu_type($item);
      $items[$extra['route']['href']] = $item;
    }
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function calista_menu_alter(&$items) {
  if (variable_get('calista_breadcrumb_alter', false)) {
    // Remove all the unnecessary pages using the 'access administration pages'
    // or whatever else permission the users may have.
    foreach ([
      'admin/compact',
      'admin/config',
      'admin/config/content',
      'admin/config/development',
      'admin/config/media',
      'admin/config/regional',
      'admin/config/search',
      'admin/config/services',
      'admin/config/system',
      'admin/config/user-interface',
      'admin/config/workflow',
      'admin/index',
      'admin/reports/status/rebuild',
      'admin/structure',
    ] as $path) {
      $items[$path]['access arguments'] = ['non existing permission'];
    }

    // Single override where we change the 'admin' home page.
    $items['admin'] = [
      'title'             => "Administration",
      'page callback'     => 'calista_admin_redirect',
      'access arguments'  => ['access administration pages'],
      'type'              => MENU_CALLBACK,
      // Required to avoid file_scan_directory() calls when rebuilding menu.
      'module'            => 'calista',
    ];
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function calista_menu_breadcrumb_alter(&$active_trail, $item) {
  if (variable_get('calista_breadcrumb_alter', false) && path_is_admin(current_path())) {

    // Remove the useless 'Home' link. Using array_splice() will reset the
    // numerical indexes within the array allowing the rest of the function
    // to work properly.
    array_splice($active_trail, 0, 1);

    // Remove any item that would be just 'admin', this specific admin page
    // is to be hidden within our custom admin, it does not make sense to
    // keep it.
    foreach ($active_trail as $index => $item) {
      if ('admin' === $item['href']) {
        array_splice($active_trail, $index, 1);
      }
    }

    // Ensure the first item is the dashboard item, if not inject it,
    // dashboard is the main entry point for everything. Please note that if
    // the current path is the dashboard, there is not other alteration to be
    // done so we'll return early.
    if ('admin/dashboard' === current_path()) {
      return;
    }

    if ('admin/dashboard' !== $active_trail[0]['href']) {
      array_unshift($active_trail, [
        'title' => t("Dashboard"),
        'href'  => 'admin/dahsboard',
        'localized_options' => [],
      ]);
    }

    $manager = ucms_site_manager();
    if ($manager->hasContext()) {
      array_splice($active_trail, 1, 0, [
        [
          'title' => check_plain($manager->getContext()->getAdminTitle()),
          'href'  => '<front>',
          'localized_options' => [],
        ]
      ]);
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function calista_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'page_build') {
    // Move this module's implementation at the bottom of the list to ensure
    // that everything else has been rendered, and potential events/hooks
    // were run to fully populate data for the context pane. For example,
    // phplayout needs to have built the layouts and registered them to its
    // context before we set the context pane content which contains the
    // edit form.
    $group = $implementations['calista'];
    unset($implementations['calista']);
    $implementations['calista'] = $group;
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function calista_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes'][CALISTA_VIEW_MODE_CONTENTADMIN] = [
    'label' => t('Content admin display'),
    'custom settings' => false,
  ];
  $entity_info['node']['view modes'][CALISTA_VIEW_MODE_FAVORITE] = [
    'label' => t('Favorite in cart'),
    'custom settings' => false,
  ];
}

/**
 * Implements hook_image_default_styles().
 */
function calista_image_default_styles() {
  return [
    CALISTA_STYLE_CONTENTADMIN => [
      'effects' => [[
        'name' => 'image_scale_and_crop',
        'data' => [
          'width'   => 285, // ~ col-md-3
          'height'  => 285,
          'upscale' => 1,
        ],
        'weight' => 0,
      ]],
    ],
    CALISTA_STYLE_FAVORITE => [
      'effects' => [[
        'name' => 'image_scale_and_crop',
        'data' => [
          'width'   => 120, // ~ col-md-6 in cart
          'height'  => 120,
          'upscale' => 1,
        ],
        'weight' => 0,
      ]],
    ],
  ];
}

/**
 * Implements hook_node_view_alter().
 *
 * Removes links from nodes when in build modes used for back office.
 */
function calista_node_view_alter(&$build) {
  switch ($build['#view_mode']) {

    case CALISTA_VIEW_MODE_CONTENTADMIN:
    case CALISTA_VIEW_MODE_FAVORITE:
      $build['links']['#access'] = false;
      break;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Removes submitted information and adds necessary stuff for JS.
 */
function calista_preprocess_node(&$variables) {

  // Adds the data-nid attribute on all nodes.
  // @todo exclude cart as of now else it'll trigger bugs:
  //   - remove custom template for cart items
  if ('favorite' !== $variables['view_mode']) {
    $variables['attributes_array']['data-nid'] = $variables['node']->nid;
    $variables['attributes_array']['data-viewmode'] = $variables['view_mode'];
  }

  switch ($variables['view_mode']) {

    case CALISTA_VIEW_MODE_CONTENTADMIN:
    case CALISTA_VIEW_MODE_FAVORITE:
      $variables['submitted'] = null;
      break;
  }
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * @todo move to a custom module!
 */
function calista_field_attach_view_alter(&$output, $context) {

  $mapping = [
    CALISTA_VIEW_MODE_CONTENTADMIN => CALISTA_STYLE_CONTENTADMIN,
    CALISTA_VIEW_MODE_FAVORITE     => CALISTA_STYLE_FAVORITE,
  ];

  // Only work on nodes and some view modes.
  if ('node' !== $context['entity_type'] || empty($mapping[$context['view_mode']])) {
    return;
  }

  $view_mode = $mapping[$context['view_mode']];

  // Force image style on content viewed in admin mode
  $image_found = false;
  if (in_array($context['view_mode'], array_keys($mapping))) {
    foreach (element_children($output) as $field_name) {
      $element = &$output[$field_name];
      $image_found = _calista_find_image_recursive($element, $view_mode);
      if ($image_found) {
        break;
      }
    }
  }

  if (!$image_found) {
    // Add a default image for other medias/content.
    $icon_mapping = [
      // media
      'document'  => 'file',
      'video'     => 'film',
      // Composite content
      'list_type' => 'list',
      'search'    => 'search',
      'geosearch' => 'map-marker',
      // other content
      'form'      => 'list-alt',
      'job_offer' => 'briefcase',
    ];
    $markup = '<div class="calista-default-icon img-thumbnail"><div><div>';
    if (!empty($icon_mapping[$output['#bundle']])) {
      $markup .= '<span class="glyphicon glyphicon-' . $icon_mapping[$output['#bundle']] . '"></span>';
    }
    else {
      $markup .= '<span>' . node_type_get_name($context['entity']) . '</span>';
    }
    $markup .= '</div></div></div>';
    $output['default_icon'] = ['#markup' => $markup];
  }

  // Add icon relative to meta content type
  $icon_mapping = ['content' => 'file', 'media'   => 'picture'];
  $meta_type = null;
  if (module_exists('ucms_contrib')) {
    $typeHandler = ucms_contrib_type_handler_get();
    foreach ($typeHandler->getTabs() as $tab => $label) {
      if (in_array($output['#bundle'], $typeHandler->getTabTypes($tab))) {
        $meta_type = $tab;
      }
    }
  }

  $output['metadata']['#prefix'] = '<div class="ucms-metadata">';
  $output['metadata']['#suffix'] = '</div>';
  if (!$context['entity']->status) {
    $output['metadata']['status_icon'] = [
      '#markup' => '<span class="calista-unpublished-icon glyphicon glyphicon-warning-sign"></span>',
      '#weight' => 5,
    ];
  }
  if ($meta_type && isset($icon_mapping[$meta_type])) {
    $output['metadata']['type_icon'] = [
      '#markup' => '<span class="calista-type-icon glyphicon glyphicon-' . $icon_mapping[$meta_type] . '"></span>',
      '#weight' => 10,
    ];
  }
}

/**
 * @param $element
 * @param $view_mode
 * @return bool
 */
function _calista_find_image_recursive(&$element, $view_mode) {
  $image_found = false;

  if (isset($element['#field_type']) && $element['#field_type'] == 'image' && ($element['#formatter'] == 'image' || $element['#formatter'] == 'iresponsive')) {
    foreach (element_children($element) as $delta) {
      if ($delta === 0) {
        $image_found = true;
        // Force image style related to view mode.
        $element[$delta]['#image_style'] = $view_mode;
        $element[$delta]['#item']['attributes']['class'] = 'img-responsive img-rounded';
      } else {
        // Hide other image for slideshows.
        $element[$delta]['#access'] = false;
      }
    }
  } else if (count(element_children($element))) {
    foreach (element_children($element) as $key) {
      $image_found = _calista_find_image_recursive($element[$key], $view_mode);
      if ($image_found) {
        $element = $element[$key];
        return TRUE;
      }
    }
  } else {
    $element['#access'] = false;
  }

  return $image_found;
}

/**
 * Main dashboard page.
 *
 * @todo Put me in a controller!
 */
function calista_page() {
  return [
    '#theme'  => 'calista_page',
    '#portlets' => \Drupal::service('calista.portlet_registry')->getPortletsForCurrentUser(),
  ];
}

/**
 * Menu callback.
 */
function calista_admin_redirect() {
  drupal_goto('admin/dashboard');
}

/**
 * Admin home.
 */
function calista_home() {
  if (drupal_is_cli()) {
    return; // Make drush happy.
  }
  if (ucms_site_manager()->hasContext()) {
    return; // Let sites handle their own frontpage.
  }
  if (!user_is_logged_in()) {
    drupal_goto('user/login');
  }
  drupal_goto('admin/dashboard');
}

/**
 * Implements hook_user_login().
 */
function calista_user_login(&$edit, $account) {
  // When a user logs in, he must be redirected to main dashboard.
  if (drupal_is_cli()) {
    return; // Make drush happy.
  }
  // This infamous redirect is useful only when the module is asked
  // to alter the dashboard.
  if (!variable_get('calista_breadcrumb_alter', false)) {
    return;
  }
  if (module_exists('ucms_site') && ucms_site_manager()->hasContext()) {
    return; // Let sites handle their own frontpage.
  }
  $GLOBALS['calista_login_redirect'] = true;
}

/**
 * Implements hook_drupal_goto_alter().
 */
function calista_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  // This is the most proper way to provide a user login redirect.
  if (!empty($GLOBALS['calista_login_redirect'])) {
    if (isset($_GET['destination'])) {
      return; // Do not alter proper redirect.
    }
    $path = 'admin/dashboard';
  }
}

/**
 * Implements hook_theme().
 */
function calista_theme() {
  return [
    'calista_context' => [
      'variables' => [
        'tabs'        => [],
        'items'       => [],
        'actions'     => [],
      ],
      'template' => 'templates/calista-context',
    ],
    'calista_page' => [
      'variables' => ['portlets' => []],
      'template'  => 'templates/calista-page',
    ],
    'calista_top' => [
      'variables' => ['links' => []],
      'template'  => 'templates/calista-top',
    ],
  ];
}

/**
 * Implements hook_page_build().
 */
function calista_page_build(&$page) {

  $page['content']['#attached']['library'][] = ['calista', 'calista'];
  $page['content']['#attached']['library'][] = ['system', 'jquery.once'];

  if (variable_get('calista_context_pane_enable') &&
      user_access(CALISTA_PERM_USE_CONTEXT_PANE)
  ) {
    /** @var \MakinaCorpus\Drupal\Calista\Context\ContextPane $context */
    $context = \Drupal::service('calista.context');
    $context->init();

    $js_setting = [
      'type' => 'setting',
      'data' => [
        'calista' => [
          'defaultPane' => $context->getDefaultTab(),
          'isOpened'    => $context->isOpened(),
        ],
      ],
    ];

    $tabs = $context->getTabs();
    if (!$tabs) {
        $context->addTab('default', t("Context"), 'pencil');
        $tabs = $context->getTabs();
    }

    $page['page_top']['calista_context_pane'] = [
      '#theme'    => 'calista_context',
      '#items'    => $context->getAll(),
      '#tabs'     => $tabs,
      '#actions'  => $context->getActions(),
      '#attached' => [
        'library' => [['calista', 'calista'], ['system', 'jquery.once']],
        'js'      => [$js_setting],
      ],
    ];
  }

  if (
    variable_get('calista_toolbar_enable') &&
    (user_is_logged_in() || path_is_admin(current_path()))
    && module_exists('ucms_site')
  ) {
    $links = menu_navigation_links('main-menu');
    foreach ($links as $i => $link) {
      if ($link['href'] === 'user/logout' && user_access('access administration pages')) {
        $links[$i]['href'] = ucms_site_master_absolute_url() . '/user/logout';
        $links[$i]['absolute'] = true;
      }
    }

    $page['page_top']['calista_top'] = [
      '#theme' => 'calista_top',
      '#links' => [
        '#theme' => 'links__main_menu',
        '#links' => $links,
      ],
    ];
  }
}

/**
 * Implements hook_library().
 */
function calista_library() {
  $path = drupal_get_path('module', 'calista');

  $libraries = [
    'calista' => [
      'title' => 'Calista',
      'version' => '0.1',
      'js' => [
        $path . '/js/calista.js' => [],
      ],
      'css' => [
        $path . '/js/calista.css' => ['type'  => 'file', 'media' => 'screen'],
      ],
      'dependencies' => [['system', 'jquery.cookie']],
    ],
    'calista_page' => [
      'title' => 'Calista page handling',
      'version' => '0.1',
      'js' => [
        $path . '/js/jquery.typewatch.js' => [],
        $path . '/js/calista.page.js' => [],
      ],
    ],
    'calista_seven' => [
      'title' => 'Calista Seven theme compatibility',
      'version' => '0.1',
      'js' => [
        $path . '/js/seven/seven-fixes.js' => [],
      ],
      'css' => [
        $path . '/js/seven/glyphicons.css' => ['type'  => 'file', 'media' => 'screen'],
        $path . '/js/seven/seven-fixes.css' => ['type'  => 'file', 'media' => 'screen'],
      ],
    ],
  ];

  if (variable_get('calista_disable_css')) {
    $libraries['calista']['css'] = [];
  }

  return $libraries;
}
